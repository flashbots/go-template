name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  reproducibility-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Set SOURCE_DATE_EPOCH for reproducible builds
        run: echo "SOURCE_DATE_EPOCH=$(git log -1 --format=%ct)" >> $GITHUB_ENV

      - name: Test reproducible builds
        run: |
          # Install GoReleaser
          go install github.com/goreleaser/goreleaser/v2@latest
          
          # Run reproducibility test
          make package-test-reproducible
          
          echo "✅ Reproducibility test passed"
        env:
          SOURCE_DATE_EPOCH: ${{ env.SOURCE_DATE_EPOCH }}

  release:
    runs-on: ubuntu-latest
    needs: reproducibility-test  # Only run if reproducibility test passes
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Set SOURCE_DATE_EPOCH for reproducible builds
        run: echo "SOURCE_DATE_EPOCH=$(git log -1 --format=%ct)" >> $GITHUB_ENV

      - name: Set up packaging dependencies
        run: |
          # Install nfpm for packaging
          echo 'deb [trusted=yes] https://repo.goreleaser.com/apt/ /' | sudo tee /etc/apt/sources.list.d/goreleaser.list
          sudo apt-get update
          sudo apt-get install -y nfpm

      - name: Import GPG key (if available)
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        if: env.GPG_PRIVATE_KEY != ''
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Run GoReleaser (Release)
        uses: goreleaser/goreleaser-action@v6
        if: startsWith(github.ref, 'refs/tags/')
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SOURCE_DATE_EPOCH: ${{ env.SOURCE_DATE_EPOCH }}
          GPG_KEY_PATH: ${{ steps.import_gpg.outputs.keyid && format('/tmp/gpg-{0}.key', steps.import_gpg.outputs.keyid) || '' }}
          NFPM_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: |
            dist/*.deb
            dist/*.rpm
            dist/*.tar.gz
            dist/checksums.txt
          retention-days: 30

      - name: Test package installation
        run: |
          # Test Debian package installation - use AMD64 package for GitHub Actions runner
          DEB_FILE=$(find dist -name "*httpserver*_linux_amd64.deb" | head -1)
          if [ -n "$DEB_FILE" ]; then
            echo "Testing package installation: $DEB_FILE"
            sudo dpkg -i "$DEB_FILE" || true
            sudo apt-get -f install -y
            
            # Test if binary is installed and working
            /usr/bin/go-template-httpserver --help
            
            # Test systemd service
            sudo systemctl daemon-reload
            sudo systemctl is-enabled go-template-httpserver
            
            echo "✅ Package installation test passed"
          else
            echo "❌ No AMD64 .deb file found for testing"
            exit 1
          fi
